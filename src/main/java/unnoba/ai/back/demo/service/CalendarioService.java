package unnoba.ai.back.demo.service;

import org.springframework.stereotype.Service;
import unnoba.ai.back.demo.constants.ScrapingConstants;
import unnoba.ai.back.demo.constants.UnnobaUrls;
import unnoba.ai.back.demo.dto.FechasInscripcionDto;
import unnoba.ai.back.demo.utils.ScrapingUtils;

import java.io.IOException;
import java.util.*;
import java.util.stream.Collectors;

@Service
public class CalendarioService {

  private final ScrapingService scrapingService;

  public CalendarioService(ScrapingService scrapingService) {
    this.scrapingService = scrapingService;
  }

  /**
   * Obtiene informaci√≥n completa del calendario acad√©mico
   */
  public String obtenerInformacionCalendario() throws IOException {
    Set<String> informacionExtraida = scrapingService.buscarInformacionConProfundidad(
        UnnobaUrls.CALENDARIO_URL, ScrapingConstants.MAX_SEARCH_DEPTH);

    StringBuilder info = new StringBuilder();
    info.append("üìÖ **CALENDARIO ACAD√âMICO UNNOBA**\n\n");
    info.append(
        "El calendario acad√©mico oficial de la UNNOBA contiene todas las fechas importantes del a√±o lectivo.\n\n");
    info.append("**Acceso directo:** ").append(UnnobaUrls.CALENDARIO_URL).append("\n\n");

    return info.toString();
  }

  /**
   * Extrae fechas espec√≠ficas seg√∫n el tipo de consulta
   */
  public String extraerFechasEspecificas(String tipoConsulta) throws IOException {
    Set<String> informacionExtraida = scrapingService.buscarInformacionConProfundidad(
        UnnobaUrls.CALENDARIO_URL, ScrapingConstants.MAX_SEARCH_DEPTH);

    StringBuilder resultado = new StringBuilder();
    resultado.append("üìÖ **Informaci√≥n encontrada:**\n\n");
    resultado.append("‚Ä¢ Consult√° el calendario acad√©mico para informaci√≥n actualizada: ")
        .append(UnnobaUrls.CALENDARIO_URL).append("\n");

    return resultado.toString();
  }

  /**
   * Extrae fechas de inscripci√≥n a materias
   */
  public String extraerFechasInscripcionMaterias() throws IOException {
    StringBuilder respuesta = new StringBuilder();
    respuesta.append("üìù **FECHAS DE INSCRIPCI√ìN A MATERIAS - UNNOBA**\n\n");
    respuesta.append("üîó **Sistema SIU-Guaran√≠:** ").append(UnnobaUrls.BASE_SIU_URL).append("\n");
    respuesta.append("üìÖ **Calendario completo:** ").append(UnnobaUrls.CALENDARIO_URL);

    return respuesta.toString();
  }

  /**
   * Extrae fechas espec√≠ficas para primer cuatrimestre
   */
  public String extraerFechasInscripcionPrimerCuatrimestre() throws IOException {
    return extraerFechasInscripcionMaterias(); // Reutiliza la l√≥gica existente
  }

  /**
   * Extrae fechas espec√≠ficas para segundo cuatrimestre
   */
  public String extraerFechasInscripcionSegundoCuatrimestre() throws IOException {
    FechasInscripcionDto fechas = extraerFechasDelCalendarioInscripciones();

    StringBuilder respuesta = new StringBuilder();
    respuesta.append("üìù **FECHAS DE INSCRIPCI√ìN - SEGUNDO CUATRIMESTRE**\n\n");

    if (fechas.getFechaInicioSegundoCuatrimestre() != null || fechas.getFechaFinSegundoCuatrimestre() != null) {
      respuesta.append("**üìö SEGUNDO CUATRIMESTRE - Materias Regulares:**\n");
      if (fechas.getFechaInicioSegundoCuatrimestre() != null) {
        respuesta.append("‚Ä¢ **Inicio:** ").append(fechas.getFechaInicioSegundoCuatrimestre()).append("\n");
      }
      if (fechas.getFechaFinSegundoCuatrimestre() != null) {
        respuesta.append("‚Ä¢ **Fin:** ").append(fechas.getFechaFinSegundoCuatrimestre()).append("\n");
      }
      respuesta.append("\n");
    }

    respuesta.append("üîó **Sistema SIU-Guaran√≠:** ").append(UnnobaUrls.BASE_SIU_URL).append("\n");
    respuesta.append("üìÖ **Calendario completo:** ").append(UnnobaUrls.CALENDARIO_URL);

    return respuesta.toString();
  }

  /**
   * Extrae informaci√≥n detallada de inscripci√≥n a materias
   */
  public String extraerFechasInscripcionMateriasDetallada() throws IOException {
    Set<String> informacionExtraida = scrapingService.buscarInformacionConProfundidad(
        UnnobaUrls.CALENDARIO_URL, ScrapingConstants.MAX_SEARCH_DEPTH);

    StringBuilder respuesta = new StringBuilder();
    respuesta.append("üìù **INSCRIPCI√ìN A MATERIAS - INFORMACI√ìN DETALLADA**\n\n");

    // Filtrar informaci√≥n espec√≠fica sobre inscripciones
    List<String> inscripciones = informacionExtraida.stream()
        .filter(info -> {
          String infoLower = info.toLowerCase();
          return (infoLower.contains("inscripci√≥n") || infoLower.contains("inscripcion")) &&
              (infoLower.contains("materia") || infoLower.contains("regular") || infoLower.contains("pendiente"));
        })
        .distinct()
        .limit(10)
        .collect(Collectors.toList());

    if (!inscripciones.isEmpty()) {
      respuesta.append("**üìã Informaci√≥n encontrada:**\n");
      inscripciones.forEach(info -> respuesta.append("‚Ä¢ ").append(info).append("\n"));
      respuesta.append("\n");
    }

    respuesta.append("**üí° Informaci√≥n importante:**\n");
    respuesta.append("‚Ä¢ Las fechas pueden variar seg√∫n la carrera\n");
    respuesta.append("‚Ä¢ Verific√° siempre en el sistema SIU-Guaran√≠\n");
    respuesta.append("‚Ä¢ Consult√° el calendario acad√©mico para fechas exactas\n\n");

    respuesta.append("üîó **Sistema SIU-Guaran√≠:** ").append(UnnobaUrls.BASE_SIU_URL).append("\n");
    respuesta.append("üìÖ **Calendario completo:** ").append(UnnobaUrls.CALENDARIO_URL);

    return respuesta.toString();
  }

  /**
   * Consulta fecha espec√≠fica mediante texto libre
   */
  public String consultarFechaEspecifica(String consulta) throws IOException {
    Set<String> informacionExtraida = scrapingService.buscarInformacionConProfundidad(
        UnnobaUrls.CALENDARIO_URL, ScrapingConstants.MAX_SEARCH_DEPTH);

    String consultaLower = consulta.toLowerCase();

    // Buscar informaci√≥n relacionada con la consulta
    List<String> resultados = informacionExtraida.stream()
        .filter(info -> {
          String infoLower = info.toLowerCase();
          return Arrays.stream(consultaLower.split("\\s+"))
              .anyMatch(palabra -> infoLower.contains(palabra) && palabra.length() > 3);
        })
        .distinct()
        .limit(5)
        .collect(Collectors.toList());

    StringBuilder respuesta = new StringBuilder();
    respuesta.append("üîç **Resultados para: \"").append(consulta).append("\"**\n\n");

    if (!resultados.isEmpty()) {
      respuesta.append("**üìã Informaci√≥n encontrada:**\n");
      resultados.forEach(resultado -> respuesta.append("‚Ä¢ ").append(resultado).append("\n"));
      respuesta.append("\n");
    } else {
      respuesta.append("‚Ä¢ No se encontr√≥ informaci√≥n espec√≠fica para tu consulta\n");
      respuesta.append("‚Ä¢ Intent√° con t√©rminos m√°s generales\n");
      respuesta.append("‚Ä¢ Consult√° directamente el calendario acad√©mico\n\n");
    }

    respuesta.append("üìÖ **Calendario completo:** ").append(UnnobaUrls.CALENDARIO_URL);

    return respuesta.toString();
  }

  // M√©todos privados auxiliares

  private Map<String, List<String>> organizarEventosPorCategoria(Set<String> informacionExtraida) {
    Map<String, List<String>> categorias = new HashMap<>();
    categorias.put("inscripciones", new ArrayList<>());
    categorias.put("examenes", new ArrayList<>());
    categorias.put("feriados", new ArrayList<>());
    categorias.put("clases", new ArrayList<>());
    categorias.put("confirmaciones", new ArrayList<>());

    for (String informacion : informacionExtraida) {
      String infoLower = informacion.toLowerCase();

      if ((infoLower.contains("inscripci√≥n") || infoLower.contains("inscripcion")) &&
          (infoLower.contains("turno") || infoLower.contains("inicio") || infoLower.contains("fecha"))) {
        categorias.get("inscripciones").add(informacion);
      } else if ((infoLower.contains("examen") || infoLower.contains("final") || infoLower.contains("turno")) &&
          (infoLower.contains("fecha") || infoLower.contains("mesa") || infoLower.contains("2025"))) {
        categorias.get("examenes").add(informacion);
      } else if (infoLower.contains("confirmaci√≥n") || infoLower.contains("confirmacion")) {
        categorias.get("confirmaciones").add(informacion);
      } else if (infoLower.contains("feriado") || infoLower.contains("no laborable") ||
          infoLower.contains("d√≠a no laborable")) {
        categorias.get("feriados").add(informacion);
      } else if ((infoLower.contains("inicio") || infoLower.contains("fin")) &&
          (infoLower.contains("clase") || infoLower.contains("semestre") || infoLower.contains("cuatrimestre"))) {
        categorias.get("clases").add(informacion);
      }
    }

    return categorias;
  }

  private void construirRespuestaOrganizada(StringBuilder info, Map<String, List<String>> eventosPorCategoria) {
    if (!eventosPorCategoria.get("inscripciones").isEmpty()) {
      info.append("üìù **INSCRIPCIONES:**\n");
      eventosPorCategoria.get("inscripciones").stream().distinct().limit(4)
          .forEach(evento -> info.append("‚Ä¢ ").append(evento).append("\n"));
      info.append("\n");
    }

    if (!eventosPorCategoria.get("examenes").isEmpty()) {
      info.append("üìã **EX√ÅMENES:**\n");
      eventosPorCategoria.get("examenes").stream().distinct().limit(4)
          .forEach(evento -> info.append("‚Ä¢ ").append(evento).append("\n"));
      info.append("\n");
    }

    if (!eventosPorCategoria.get("clases").isEmpty()) {
      info.append("üéì **CLASES Y CUATRIMESTRES:**\n");
      eventosPorCategoria.get("clases").stream().distinct().limit(3)
          .forEach(evento -> info.append("‚Ä¢ ").append(evento).append("\n"));
      info.append("\n");
    }

    if (eventosPorCategoria.values().stream().allMatch(List::isEmpty)) {
      info.append(
          "**üí° Informaci√≥n importante:** El calendario se actualiza regularmente, por eso es recomendable consultarlo frecuentemente.\n\n");
      info.append("Para obtener informaci√≥n espec√≠fica sobre fechas de ex√°menes, inscripciones y eventos acad√©micos, ");
      info.append("consult√° directamente el calendario oficial.\n");
    }
  }

  private List<String> filtrarEventosPorTipo(Set<String> informacionExtraida, String tipoConsulta) {
    return informacionExtraida.stream()
        .filter(informacion -> {
          String infoLower = informacion.toLowerCase();
          return switch (tipoConsulta.toLowerCase()) {
            case "inicio_cuatrimestre", "inicio_primer_cuatrimestre", "inicio_segundo_cuatrimestre" ->
              (infoLower.contains("inicio") &&
                  (infoLower.contains("semestre") || infoLower.contains("cuatrimestre") || infoLower.contains("clase")))
                  ||
                  (infoLower.contains("comienzo") && infoLower.contains("clase"));

            case "fin_cuatrimestre", "fin_primer_cuatrimestre", "fin_segundo_cuatrimestre" ->
              (infoLower.contains("fin") || infoLower.contains("t√©rmino") ||
                  infoLower.contains("termino") || infoLower.contains("finalizaci√≥n")) &&
                  (infoLower.contains("semestre") || infoLower.contains("cuatrimestre") || infoLower.contains("clase"));

            case "examenes", "mesas_finales" ->
              (infoLower.contains("examen") || infoLower.contains("final") || infoLower.contains("turno")) &&
                  (infoLower.contains("fecha") || infoLower.contains("mesa") || infoLower.contains("inscripci√≥n"));

            case "confirmacion", "inscripcion_carrera" ->
              infoLower.contains("confirmaci√≥n") || infoLower.contains("confirmacion") ||
                  (infoLower.contains("inscripci√≥n") && infoLower.contains("carrera"));

            case "feriados" ->
              infoLower.contains("feriado") || infoLower.contains("no laborable") ||
                  infoLower.contains("d√≠a no laborable");

            default -> false;
          };
        })
        .filter(info -> ScrapingUtils.esTextoValido(info))
        .collect(Collectors.toList());
  }

  private FechasInscripcionDto extraerFechasDelCalendarioInscripciones() throws IOException {
    FechasInscripcionDto fechas = new FechasInscripcionDto();

    // Implementar l√≥gica de extracci√≥n de fechas espec√≠ficas
    // Por ahora retorna un DTO b√°sico
    fechas.setFechaInicioRegular("Consultar calendario acad√©mico");
    fechas.setFechaFinRegular("Consultar calendario acad√©mico");
    fechas.setUrlRegular(UnnobaUrls.CALENDARIO_URL);

    return fechas;
  }
}