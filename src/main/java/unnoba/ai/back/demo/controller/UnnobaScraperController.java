package unnoba.ai.back.demo.controller;

import org.jsoup.Jsoup;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.Element;
import org.jsoup.select.Elements;
import org.springframework.web.bind.annotation.*;

import unnoba.ai.back.demo.carreras.EnlacesInformatica;
import unnoba.ai.back.demo.carreras.EnlacesDise√±o;
import unnoba.ai.back.demo.carreras.EnlacesGenerales;
import unnoba.ai.back.demo.carreras.EnlacesInscripciones;
import unnoba.ai.back.demo.carreras.EnlacesDistribucionAulas;

import java.io.IOException;
import java.util.*;

@CrossOrigin(origins = "http://localhost:5173")
@RestController
@RequestMapping("/api/unnoba")
public class UnnobaScraperController {

    @GetMapping("/dise√±o-grafico")
    public String getDise√±oGrafico() throws IOException {
        EnlacesDise√±o busquedaEnlaces = new EnlacesDise√±o();
        Set<String> listaEnlaces = busquedaEnlaces.buscarLicenciaturaDise√±oGrafico();
        return getTextoUrls(listaEnlaces);
    }

    @GetMapping("/dise√±o-indumentaria-y-textil")
    public String getDise√±oIndumentariaYTextil() throws IOException {
        EnlacesDise√±o busquedaEnlaces = new EnlacesDise√±o();
        Set<String> listaEnlaces = busquedaEnlaces.buscarLICENCIATURADISE√ëOINDUMENTARIAYTEXTIL();
        return getTextoUrls(listaEnlaces);
    }

    @GetMapping("/dise√±o-industrial")
    public String getDise√±oIndustrial() throws IOException {
        EnlacesDise√±o busquedaEnlaces = new EnlacesDise√±o();
        Set<String> listaEnlaces = busquedaEnlaces.buscarLicenciaturaDise√±oIndustrial();
        return getTextoUrls(listaEnlaces);
    }

    @GetMapping("/ingenieria-informatica")
    public String getInformatica() throws IOException {
        EnlacesInformatica b = new EnlacesInformatica();
        Set<String> listaEnlaces = b.ingenieriaInformatica();
        return getTextoUrls(listaEnlaces);
    }

    @GetMapping("/licenciatura-sistemas")
    public String getLicenciaturaSistemas() throws IOException {
        EnlacesInformatica b = new EnlacesInformatica();
        Set<String> listaEnlaces = b.licenciaturaSistemas();
        return getTextoUrls(listaEnlaces);
    }

    @GetMapping("/analista-sistemas")
    public String getAnalistaSistemas() throws IOException {
        EnlacesInformatica b = new EnlacesInformatica();
        Set<String> listaEnlaces = b.analistaSistemas();
        return getTextoUrls(listaEnlaces);
    }

    @GetMapping("/medicina")
    public String getMedicina() throws IOException {
        EnlacesGenerales buscador = new EnlacesGenerales();
        Set<String> listaEnlaces = buscador.medicina();
        return getTextoUrls(listaEnlaces);
    }

    @GetMapping("/enfermeria")
    public String getEnfermeria() throws IOException {
        EnlacesGenerales buscador = new EnlacesGenerales();
        Set<String> listaEnlaces = buscador.enfermeria();
        return getTextoUrls(listaEnlaces);
    }

    @GetMapping("/abogacia")
    public String getAbogacia() throws IOException {
        EnlacesGenerales buscador = new EnlacesGenerales();
        Set<String> listaEnlaces = buscador.abogacia();
        return getTextoUrls(listaEnlaces);
    }

    @GetMapping("/contador-publico")
    public String getContadorPublico() throws IOException {
        EnlacesGenerales buscador = new EnlacesGenerales();
        Set<String> listaEnlaces = buscador.contadorPublico();
        return getTextoUrls(listaEnlaces);
    }

    @GetMapping("/agronomia")
    public String getAgronomia() throws IOException {
        EnlacesGenerales buscador = new EnlacesGenerales();
        Set<String> listaEnlaces = buscador.agronomia();
        return getTextoUrls(listaEnlaces);
    }

    @GetMapping("/ingenieria-mecatronica")
    public String getMecatronica() throws IOException {
        EnlacesGenerales buscador = new EnlacesGenerales();
        Set<String> listaEnlaces = buscador.ingenieriaMecatronica();
        return getTextoUrls(listaEnlaces);
    }

    @GetMapping("/genetica")
    public String getGenetica() throws IOException {
        EnlacesGenerales buscador = new EnlacesGenerales();
        Set<String> listaEnlaces = buscador.licenciaturaGenetica();
        return getTextoUrls(listaEnlaces);
    }

    @GetMapping("/inscripcion-materias")
    public String getInscripcionMaterias() throws IOException {
        // Obtener fechas din√°micamente del calendario acad√©mico
        EnlacesInscripciones buscador = new EnlacesInscripciones();
        return buscador.extraerFechasInscripcionMaterias();
    }

    @GetMapping("/inscripcion-materias-primer-cuatrimestre")
    public String getInscripcionMateriasPrimerCuatrimestre() throws IOException {
        // Obtener fechas din√°micamente del calendario acad√©mico
        EnlacesInscripciones buscador = new EnlacesInscripciones();
        return buscador.extraerFechasInscripcionPrimerCuatrimestre();
    }

    @GetMapping("/inscripcion-materias-segundo-cuatrimestre")
    public String getInscripcionMateriasSegundoCuatrimestre() throws IOException {
        // Obtener fechas din√°micamente del calendario acad√©mico
        EnlacesInscripciones buscador = new EnlacesInscripciones();
        return buscador.extraerFechasInscripcionSegundoCuatrimestre();
    }

    @GetMapping("/inscripcion-materias-detallada")
    public String getInscripcionMateriasDetallada() throws IOException {
        // Obtener informaci√≥n detallada din√°micamente del calendario acad√©mico
        EnlacesInscripciones buscador = new EnlacesInscripciones();
        return buscador.extraerFechasInscripcionMateriasDetallada();
    }

    // Endpoints espec√≠ficos para preguntas frecuentes del calendario

    @GetMapping("/inicio-cuatrimestres")
    public String getInicioCuatrimestres() throws IOException {
        String respuesta = """
                üéì **INICIO DE CUATRIMESTRES - UNNOBA**
                """;

        EnlacesInscripciones buscador = new EnlacesInscripciones();
        String fechas = buscador.extraerFechasEspecificas("inicio_cuatrimestre");

        return respuesta + "\n" + fechas + "\nüìÖ **Calendario completo:** https://elegi.unnoba.edu.ar/calendario/";
    }

    @GetMapping("/fin-cuatrimestres")
    public String getFinCuatrimestres() throws IOException {
        String respuesta = """
                üìö **FIN DE CUATRIMESTRES - UNNOBA**
                """;

        EnlacesInscripciones buscador = new EnlacesInscripciones();
        String fechas = buscador.extraerFechasEspecificas("fin_cuatrimestre");

        return respuesta + "\n" + fechas + "\nüìÖ **Calendario completo:** https://elegi.unnoba.edu.ar/calendario/";
    }

    @GetMapping("/examenes-finales")
    public String getExamenesFinales() throws IOException {
        String respuesta = """
                üìù **EX√ÅMENES FINALES - UNNOBA**
                """;

        EnlacesInscripciones buscador = new EnlacesInscripciones();
        String fechas = buscador.extraerFechasEspecificas("examenes");

        return respuesta + "\n" + fechas + "\nüîó **Inscripci√≥n a finales:** https://g3w3.unnoba.edu.ar/g3w3/";
    }

    @GetMapping("/vacaciones-invierno")
    public String getVacacionesInvierno() throws IOException {
        String respuesta = """
                ‚ùÑÔ∏è **VACACIONES DE INVIERNO - UNNOBA**

                Para obtener las fechas exactas del receso invernal en la UNNOBA, te recomiendo consultar el calendario acad√©mico oficial de la universidad. La informaci√≥n all√≠ es siempre la m√°s precisa y actualizada.

                Por desgracia, no tengo acceso en tiempo real a esa informaci√≥n espec√≠fica.

                üìÖ **Calendario Acad√©mico Oficial:** https://elegi.unnoba.edu.ar/calendario/

                **üí° En el calendario acad√©mico encontrar√°s:**
                ‚Ä¢ Fechas exactas del receso invernal
                ‚Ä¢ Duraci√≥n de las vacaciones
                ‚Ä¢ Reinicio de actividades acad√©micas
                ‚Ä¢ Otras fechas importantes del a√±o lectivo
                """;

        return respuesta;
    }

    @GetMapping("/confirmacion-inscripcion")
    public String getConfirmacionInscripcion() throws IOException {
        String respuesta = """
                ‚úÖ **CONFIRMACI√ìN DE INSCRIPCI√ìN - UNNOBA**
                """;

        EnlacesInscripciones buscador = new EnlacesInscripciones();
        String fechas = buscador.extraerFechasEspecificas("confirmacion");

        return respuesta + "\n" + fechas + "\nüîó **Sistema SIU-Guaran√≠:** https://g3w3.unnoba.edu.ar/g3w3/";
    }

    // Endpoint espec√≠fico para consultas de ex√°menes por mes
    @GetMapping("/examenes-mes/{mes}")
    public String getExamenesPorMes(@PathVariable String mes) throws IOException {
        EnlacesInscripciones buscador = new EnlacesInscripciones();
        return buscador.extraerExamenesPorMes(mes);
    }

    // Nuevo endpoint para consultas espec√≠ficas de fechas
    @GetMapping("/fechas/{tipo}")
    public String getFechasEspecificas(@PathVariable String tipo) throws IOException {
        EnlacesInscripciones buscador = new EnlacesInscripciones();

        switch (tipo.toLowerCase()) {
            case "inicio-primer-cuatrimestre":
                return "üéì **INICIO PRIMER CUATRIMESTRE**\n\n" +
                        buscador.extraerFechasEspecificas("inicio_primer_cuatrimestre") +
                        "\nüìÖ **Calendario completo:** https://elegi.unnoba.edu.ar/calendario/";

            case "inicio-segundo-cuatrimestre":
                return "üéì **INICIO SEGUNDO CUATRIMESTRE**\n\n" +
                        buscador.extraerFechasEspecificas("inicio_segundo_cuatrimestre") +
                        "\nüìÖ **Calendario completo:** https://elegi.unnoba.edu.ar/calendario/";

            case "fin-primer-cuatrimestre":
                return "üìö **FIN PRIMER CUATRIMESTRE**\n\n" +
                        buscador.extraerFechasEspecificas("fin_primer_cuatrimestre") +
                        "\nüìÖ **Calendario completo:** https://elegi.unnoba.edu.ar/calendario/";

            case "fin-segundo-cuatrimestre":
                return "üìö **FIN SEGUNDO CUATRIMESTRE**\n\n" +
                        buscador.extraerFechasEspecificas("fin_segundo_cuatrimestre") +
                        "\nüìÖ **Calendario completo:** https://elegi.unnoba.edu.ar/calendario/";

            case "mesas-finales":
                return "üìù **MESAS DE EX√ÅMENES FINALES**\n\n" +
                        buscador.extraerFechasEspecificas("mesas_finales") +
                        "\nüîó **Inscripci√≥n:** https://g3w3.unnoba.edu.ar/g3w3/";

            case "inscripcion-carrera":
                return "‚úÖ **INSCRIPCI√ìN A LA CARRERA**\n\n" +
                        buscador.extraerFechasEspecificas("inscripcion_carrera") +
                        "\nüîó **Sistema SIU-Guaran√≠:** https://g3w3.unnoba.edu.ar/g3w3/";

            case "feriados":
                return "üéâ **FERIADOS Y D√çAS NO LABORABLES - UNNOBA**\n\n" +
                        "Para obtener la informaci√≥n exacta sobre los feriados en la UNNOBA, te recomiendo consultar el calendario acad√©mico oficial de la universidad. La informaci√≥n all√≠ es siempre la m√°s precisa y actualizada.\n\n"
                        +
                        "Por desgracia, no tengo acceso en tiempo real a esa informaci√≥n espec√≠fica.\n\n" +
                        "üìÖ **Calendario Acad√©mico Oficial:** https://elegi.unnoba.edu.ar/calendario/\n\n" +
                        "**üí° En el calendario acad√©mico encontrar√°s:**\n" +
                        "‚Ä¢ Feriados nacionales\n" +
                        "‚Ä¢ D√≠as no laborables universitarios\n" +
                        "‚Ä¢ Recesos acad√©micos\n" +
                        "‚Ä¢ Fechas especiales de la universidad";

            case "vacaciones":
                return "‚ùÑÔ∏è **VACACIONES DE INVIERNO - UNNOBA**\n\n" +
                        "Para obtener las fechas exactas del receso invernal en la UNNOBA, te recomiendo consultar el calendario acad√©mico oficial de la universidad. La informaci√≥n all√≠ es siempre la m√°s precisa y actualizada.\n\n"
                        +
                        "Por desgracia, no tengo acceso en tiempo real a esa informaci√≥n espec√≠fica.\n\n" +
                        "üìÖ **Calendario Acad√©mico Oficial:** https://elegi.unnoba.edu.ar/calendario/\n\n" +
                        "**üí° En el calendario acad√©mico encontrar√°s:**\n" +
                        "‚Ä¢ Fechas exactas del receso invernal\n" +
                        "‚Ä¢ Duraci√≥n de las vacaciones\n" +
                        "‚Ä¢ Reinicio de actividades acad√©micas\n" +
                        "‚Ä¢ Otras fechas importantes del a√±o lectivo";

            default:
                return "‚ùì **CONSULTA NO RECONOCIDA**\n\nTipos de consulta disponibles:\n" +
                        "‚Ä¢ inicio-primer-cuatrimestre\n‚Ä¢ inicio-segundo-cuatrimestre\n" +
                        "‚Ä¢ fin-primer-cuatrimestre\n‚Ä¢ fin-segundo-cuatrimestre\n" +
                        "‚Ä¢ mesas-finales\n‚Ä¢ inscripcion-carrera\n‚Ä¢ feriados\n‚Ä¢ vacaciones\n\n" +
                        "üìÖ **Calendario completo:** https://elegi.unnoba.edu.ar/calendario/";
        }
    }

    // Nuevo endpoint para consultas generales
    @GetMapping("/consultar")
    public String consultarEvento(@RequestParam String consulta) throws IOException {
        EnlacesInscripciones buscador = new EnlacesInscripciones();
        return buscador.consultarFechaEspecifica(consulta);
    }

    // Endpoints espec√≠ficos para meses de ex√°menes (incluye meses sin mesas)
    @GetMapping("/examenes-enero")
    public String getExamenesEnero() throws IOException {
        EnlacesInscripciones buscador = new EnlacesInscripciones();
        return buscador.extraerExamenesPorMes("enero");
    }

    @GetMapping("/examenes-febrero")
    public String getExamenesFebrero() throws IOException {
        EnlacesInscripciones buscador = new EnlacesInscripciones();
        return buscador.extraerExamenesPorMes("febrero");
    }

    @GetMapping("/examenes-marzo")
    public String getExamenesMarzo() throws IOException {
        EnlacesInscripciones buscador = new EnlacesInscripciones();
        return buscador.extraerExamenesPorMes("marzo");
    }

    @GetMapping("/examenes-abril")
    public String getExamenesAbril() throws IOException {
        EnlacesInscripciones buscador = new EnlacesInscripciones();
        return buscador.extraerExamenesPorMes("abril");
    }

    @GetMapping("/examenes-mayo")
    public String getExamenesMayo() throws IOException {
        EnlacesInscripciones buscador = new EnlacesInscripciones();
        return buscador.extraerExamenesPorMes("mayo");
    }

    @GetMapping("/examenes-junio")
    public String getExamenesJunio() throws IOException {
        EnlacesInscripciones buscador = new EnlacesInscripciones();
        return buscador.extraerExamenesPorMes("junio");
    }

    @GetMapping("/examenes-julio")
    public String getExamenesJulio() throws IOException {
        EnlacesInscripciones buscador = new EnlacesInscripciones();
        return buscador.extraerExamenesPorMes("julio");
    }

    @GetMapping("/examenes-agosto")
    public String getExamenesAgosto() throws IOException {
        EnlacesInscripciones buscador = new EnlacesInscripciones();
        return buscador.extraerExamenesPorMes("agosto");
    }

    @GetMapping("/examenes-septiembre")
    public String getExamenesSeptiembre() throws IOException {
        EnlacesInscripciones buscador = new EnlacesInscripciones();
        return buscador.extraerExamenesPorMes("septiembre");
    }

    @GetMapping("/examenes-octubre")
    public String getExamenesOctubre() throws IOException {
        EnlacesInscripciones buscador = new EnlacesInscripciones();
        return buscador.extraerExamenesPorMes("octubre");
    }

    @GetMapping("/examenes-noviembre")
    public String getExamenesNoviembre() throws IOException {
        EnlacesInscripciones buscador = new EnlacesInscripciones();
        return buscador.extraerExamenesPorMes("noviembre");
    }

    @GetMapping("/examenes-diciembre")
    public String getExamenesDiciembre() throws IOException {
        EnlacesInscripciones buscador = new EnlacesInscripciones();
        return buscador.extraerExamenesPorMes("diciembre");
    }

    @GetMapping("/calendario-academico")
    public String getCalendarioAcademico() throws IOException {
        EnlacesInscripciones buscador = new EnlacesInscripciones();
        return buscador.extraerInformacionCalendario();
    }

    // Endpoint para distribuci√≥n de aulas espec√≠fica
    @GetMapping("/distribucion-aulas")
    public String getDistribucionAulas(@RequestParam(required = false) String consulta) throws IOException {
        EnlacesDistribucionAulas buscador = new EnlacesDistribucionAulas();

        if (consulta != null && !consulta.trim().isEmpty()) {
            return buscador.obtenerDistribucionEspecifica(consulta);
        } else {
            return """
                    üè¢ **DISTRIBUCI√ìN DE AULAS - UNNOBA**
                    La distribuci√≥n de aulas puede consultarse a trav√©s de los siguientes enlaces:
                    **üìö Jun√≠n:**
                    ‚Ä¢ **Distribuci√≥n de aulas - Jun√≠n:** https://unnoba.edu.ar/distribucion-aulas/junin

                    **üìö Pergamino:**
                    ‚Ä¢ **Distribuci√≥n de aulas - Pergamino:** https://unnoba.edu.ar/distribucion-aulas/pergamino""";
        }
    }

    // Nuevos endpoints para todas las carreras faltantes

    @GetMapping("/tecnicatura-dise√±o-desarrollo-aplicaciones-multiplataforma")
    public String getTecnicaturaDise√±oDesarrolloAplicaciones() throws IOException {
        EnlacesInformatica b = new EnlacesInformatica();
        Set<String> listaEnlaces = b.disYDesarrolloDeAps();
        return getTextoUrls(listaEnlaces);
    }

    @GetMapping("/ingenieria-industrial")
    public String getIngenieriaIndustrial() throws IOException {
        EnlacesGenerales buscador = new EnlacesGenerales();
        Set<String> listaEnlaces = buscador.ingenieriaIndustrial();
        return getTextoUrls(listaEnlaces);
    }

    @GetMapping("/ingenieria-mecanica")
    public String getIngenieriaMecanica() throws IOException {
        EnlacesGenerales buscador = new EnlacesGenerales();
        Set<String> listaEnlaces = buscador.ingenieriaMecanica();
        return getTextoUrls(listaEnlaces);
    }

    @GetMapping("/tecnicatura-mantenimiento-industrial")
    public String getTecnicaturaMantenimientoIndustrial() throws IOException {
        EnlacesGenerales buscador = new EnlacesGenerales();
        Set<String> listaEnlaces = buscador.tecnicaturaMantenimientoIndustrial();
        return getTextoUrls(listaEnlaces);
    }

    @GetMapping("/licenciatura-administracion")
    public String getLicenciaturaAdministracion() throws IOException {
        EnlacesGenerales buscador = new EnlacesGenerales();
        Set<String> listaEnlaces = buscador.licenciaturaAdministracion();
        return getTextoUrls(listaEnlaces);
    }

    @GetMapping("/tecnicatura-gestion-pymes")
    public String getTecnicaturaGestionPymes() throws IOException {
        EnlacesGenerales buscador = new EnlacesGenerales();
        Set<String> listaEnlaces = buscador.tecnicaturaGestionPymes();
        return getTextoUrls(listaEnlaces);
    }

    @GetMapping("/tecnicatura-gestion-publica")
    public String getTecnicaturaGestionPublica() throws IOException {
        EnlacesGenerales buscador = new EnlacesGenerales();
        Set<String> listaEnlaces = buscador.tecnicaturaGestionPublica();
        return getTextoUrls(listaEnlaces);
    }

    @GetMapping("/ingenieria-alimentos")
    public String getIngenieriaAlimentos() throws IOException {
        EnlacesGenerales buscador = new EnlacesGenerales();
        Set<String> listaEnlaces = buscador.ingenieriaAlimentos();
        return getTextoUrls(listaEnlaces);
    }

    @GetMapping("/tecnicatura-produccion-alimentos")
    public String getTecnicaturaProduccionAlimentos() throws IOException {
        EnlacesGenerales buscador = new EnlacesGenerales();
        Set<String> listaEnlaces = buscador.tecnicaturaProduccionAlimentos();
        return getTextoUrls(listaEnlaces);
    }

    @GetMapping("/regularidad-estudiantes")
    public String getRegularidadEstudiantes() throws IOException {
        String respuesta = """
                üí° **SISTEMA DE REGULARIDAD - UNNOBA**

                **¬øCu√°ndo se verifica la regularidad?**
                La regularidad se verifica a fines de marzo de cada a√±o. Para mantener la condici√≥n de alumno regular necesit√°s sumar al menos **4 puntos**.

                **¬øC√≥mo se suman puntos?**
                ‚Ä¢ **1 punto** = Cada materia cursada y aprobada
                ‚Ä¢ **2 puntos** = Cada examen final aprobado

                **Ejemplos para mantener la regularidad:**
                ‚Ä¢ Cursar y aprobar 4 materias = 4 puntos ‚úÖ
                ‚Ä¢ Cursar 2 materias + aprobar 1 final = 4 puntos ‚úÖ
                ‚Ä¢ Aprobar 2 ex√°menes finales = 4 puntos ‚úÖ

                **¬øQu√© pasa si no llego a los 4 puntos?**
                Si no alcanz√°s los 4 puntos requeridos, perd√©s la condici√≥n de alumno regular, pero pod√©s seguir cursando reinscribi√©ndote a la carrera.

                **¬øCu√°ntas veces puedo reinscribirme?**
                Pod√©s reinscribirte hasta 3 veces. Si super√°s ese l√≠mite, perd√©s todas las materias aprobadas.

                üîó **Sistema SIU-Guaran√≠:** https://g3w3.unnoba.edu.ar/g3w3/
                """;

        return respuesta;
    }

    @GetMapping("/feriados")
    public String getFeriados() throws IOException {
        String respuesta = """
                üéâ **FERIADOS Y D√çAS NO LABORABLES - UNNOBA**

                Para obtener la informaci√≥n exacta sobre los feriados en la UNNOBA, te recomiendo consultar el calendario acad√©mico oficial de la universidad. La informaci√≥n all√≠ es siempre la m√°s precisa y actualizada.

                Por desgracia, no tengo acceso en tiempo real a esa informaci√≥n espec√≠fica.

                üìÖ **Calendario Acad√©mico Oficial:** https://elegi.unnoba.edu.ar/calendario/

                **üí° En el calendario acad√©mico encontrar√°s:**
                ‚Ä¢ Feriados nacionales
                ‚Ä¢ D√≠as no laborables universitarios
                ‚Ä¢ Recesos acad√©micos
                ‚Ä¢ Fechas especiales de la universidad
                """;

        return respuesta;
    }

    public String getTextoUrls(Set<String> listaEnlaces) {
        StringBuilder texto = new StringBuilder();

        for (String url : listaEnlaces) {
            try {
                Document doc = Jsoup.connect(url).get();
                Elements elementos = doc.select("*");
                Set<String> textosUnicos = new LinkedHashSet<>();

                for (Element elemento : elementos) {
                    String contenido = elemento.ownText().trim();
                    if (!contenido.isEmpty()) {
                        textosUnicos.add(contenido);
                    }
                }

                for (String linea : textosUnicos) {
                    texto.append(linea).append(" ");
                }
            } catch (IOException e) {
                System.out.println("Error al acceder a: " + url);
            }
        }

        return texto.toString();
    }
}
